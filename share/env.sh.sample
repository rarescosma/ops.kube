# =Prepare
#
# During the "prepare" stage we pull essential kubernetes, etcd and docker
# binaries as well as generate TLS certificates for the cluster.
ETCD_VERSION="3.2.7"
KUBE_VERSION="1.8.4"
DOCKER_VERSION="17.09.0-ce"

ETCD_TGZ="https://github.com/coreos/etcd/releases/download/v${ETCD_VERSION}/etcd-v${ETCD_VERSION}-linux-amd64.tar.gz"
KUBE_TGZ="https://github.com/kubernetes/kubernetes/releases/download/v${KUBE_VERSION}/kubernetes.tar.gz"
KUBE_REPO="https://storage.googleapis.com/kubernetes-release/release/v${KUBE_VERSION}/bin/linux/amd64"
DOCKER_TGZ="https://download.docker.com/linux/static/stable/x86_64/docker-${DOCKER_VERSION}.tgz"

declare -a KUBE_BINS=(
  "kube-apiserver"
  "kube-controller-manager"
  "kube-scheduler"
  "kubectl"
  "kube-proxy"
  "kubelet"
)

# =Persistence
KUBE_PV="${HOME}/pv/kube"

# =Orchestrate
#
# The "orchestrate" stage uses the declared $VM_ENGINE to manage the lifecycle
# of worker and master nodes.
#
# Supported engines: lxd, docker
VM_ENGINE="lxd"
VM_IFACE="eth0"
VM_NUM_WORKERS=1

## ==Docker - nodes are launched as persistent docker containers
# USE_SYSTEM_DOCKER="no"
DOCKER_BASE_IMG="karelian/kube_base_kubian:latest"
DOCKER_DNS_IMG="karelian/kube_base_dnsdock:dev-amd64"
DOCKER_BRIDGE="docker0"

## ==LXD - nodes are launched as persistent LXD/LXC containers
LXD_BASE_IMG="kubuntu"
LXD_IMG_FROM="images:ubuntu/zesty" # ubuntu 16.04 amd64
LXD_PROFILE="kube-profile"
LXD_BRIDGE="lxdbr0"

# =Provision
MASTER_UNITS="etcd_single kube-apiserver_single kube-controller-manager kube-scheduler"
WORKER_UNITS="docker kubelet_single kube-proxy masquerade"
WORKER_DOCKER_STORAGE_ENGINE="overlay2"
KUBE_SERVICE_CLUSTER_IP_RANGE="10.32.0.0/24"
SECRET_TOKEN="ooohlotsofs3crets"
CLUSTER_NAME="minikube"
