#!/usr/bin/env bash

set -e

DOT=$(cd -P "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)
export DOT
export TPL=$DOT/templates

if [ ! -z "$1" ] && [ -z "$CLUSTER" ]; then
  export CLUSTER="$1"
  shift
fi

export VM_HOST=$(hostname -s)

# shellcheck source=/dev/null
source "$DOT/lib/log.sh"
# shellcheck source=/dev/null
source "$DOT/$CLUSTER-env.sh" 2>/dev/null || {
  echo "Unkown cluster: $CLUSTER"
  exit 1
}

# shellcheck source=/dev/null
source "$DOT/$CLUSTER-cluster.sh" 2>/dev/null || true
# shellcheck source=/dev/null
source "$DOT/lib/utils.sh"
# shellcheck source=/dev/null
source "$DOT/lib/cluster.sh"
# shellcheck source=/dev/null
if test -f "${DOT}/lib/host.${KUBE_HOST}.sh"; then
  source "${DOT}/lib/host.${KUBE_HOST}.sh"
fi
# shellcheck source=/dev/null
source "$DOT/lib/network.sh"
# shellcheck source=/dev/null
source "$DOT/lib/orchestrate.sh"
# shellcheck source=/dev/null
source "$DOT/lib/prepare.sh"
# shellcheck source=/dev/null
source "$DOT/lib/provision.sh"
# shellcheck source=/dev/null
source "${DOT}/lib/vm.${VM_ENGINE}.sh"
# shellcheck source=/dev/null
source "${DOT}/lib/addons.sh"

start() {
  dumpstack "$*"
  utils::function_exists "host::prepare" && host::prepare

  prepare
  utils::function_exists "vm::prepare" && vm::prepare
  orchestrate

  network::start
}

stop() {
  dumpstack "$*"
  utils::function_exists "host::stop" && host::stop

  network::stop
  cluster::stop
}

clean() {
  stop

  # Clean prepare stage
  rm -rf "${DOT:?}/bin/*"
  rm -rf "$DOT/etc/tls/$CLUSTER"

  cluster::clean
  utils::function_exists "vm::clean" && vm::clean
}

orchestrate() {
  orchestrate::master 0

  for x in $(seq 0 $((VM_NUM_WORKERS-1))); do
    orchestrate::worker "$x" &
  done
  wait
}

"$@"
